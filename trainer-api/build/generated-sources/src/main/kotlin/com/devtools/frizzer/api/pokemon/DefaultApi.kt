/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.devtools.frizzer.api.pokemon

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.WebClientResponseException
import org.springframework.http.codec.json.Jackson2JsonDecoder
import org.springframework.http.codec.json.Jackson2JsonEncoder
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType
import reactor.core.publisher.Mono
import org.springframework.util.LinkedMultiValueMap

import com.devtools.frizzer.model.PokemonDto
import org.openapitools.client.infrastructure.*

class DefaultApi(client: WebClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(WebClient.builder()
        .baseUrl(baseUrl)
        .codecs {
            it.defaultCodecs().jackson2JsonEncoder(Jackson2JsonEncoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
            it.defaultCodecs().jackson2JsonDecoder(Jackson2JsonDecoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
        }
        .build()
    )


    @Throws(WebClientResponseException::class)
    fun findPokemonById(pokemonId: kotlin.Long): Mono<PokemonDto> {
        return findPokemonByIdWithHttpInfo(pokemonId = pokemonId)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun findPokemonByIdWithHttpInfo(pokemonId: kotlin.Long): Mono<ResponseEntity<PokemonDto>> {
        val localVariableConfig = findPokemonByIdRequestConfig(pokemonId = pokemonId)
        return request<Unit, PokemonDto>(
            localVariableConfig
        )
    }

    fun findPokemonByIdRequestConfig(pokemonId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "pokemonId" to pokemonId,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pokemon/{pokemonId}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun listPokemons(): Mono<kotlin.collections.List<PokemonDto>> {
        return listPokemonsWithHttpInfo()
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun listPokemonsWithHttpInfo(): Mono<ResponseEntity<kotlin.collections.List<PokemonDto>>> {
        val localVariableConfig = listPokemonsRequestConfig()
        return request<Unit, kotlin.collections.List<PokemonDto>>(
            localVariableConfig
        )
    }

    fun listPokemonsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pokemon",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun savePokemon(pokemonDto: PokemonDto): Mono<kotlin.Long> {
        return savePokemonWithHttpInfo(pokemonDto = pokemonDto)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun savePokemonWithHttpInfo(pokemonDto: PokemonDto): Mono<ResponseEntity<kotlin.Long>> {
        val localVariableConfig = savePokemonRequestConfig(pokemonDto = pokemonDto)
        return request<PokemonDto, kotlin.Long>(
            localVariableConfig
        )
    }

    fun savePokemonRequestConfig(pokemonDto: PokemonDto) : RequestConfig<PokemonDto> {
        val localVariableBody = pokemonDto
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/pokemon",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

}
